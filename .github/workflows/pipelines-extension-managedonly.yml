name: Export, unpack and commit the solution to git
run-name: Getting ${{ github.event.inputs.solution_name }} solution from environment ${{ github.event.inputs.environment_url }} environment and committing
on:
  workflow_dispatch:
    inputs:
      artifact_id:
        description: "The Dataverse record ID of the Artifact created by the pipelines."
        required: true
        default: yourartifactid
      solution_name:
        description: "Name of the Solution in Dataverse environment"
        required: true
        default: yoursolutionname
      environment_url:
        description: Https endpoint of your pipeline host Dataverse environment"
        required: true
        default: "https://[your-env].crm.dynamics.com"
      source_branch:
        description: "Branch for the solution commit"
        required: true
        default: main
      target_branch:
        description: "Branch to create for the solution commit"
        required: false
      commit_message:
        description: "Message to provide for the commit"
        required: true
permissions:
  contents: write
jobs:
  export-unpack-commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            ref: ${{ github.event.inputs.source_branch }}

      # Commit changes to the existing or new branch
      - name: create new branch if specified
        shell: pwsh
        run: |
            if('${{ github.event.inputs.target_branch }}' -ne '') {
                git checkout -b ${{ github.event.inputs.target_branch }} ${{ github.event.inputs.source_branch }}
            }

      # Export the managed solution from the artifact created by pipelines
      - name: export-managed-solution-from-artifact
        env:
            CLIENT_ID: ${{secrets.CLIENT_ID}}   
            TENANT_ID: ${{secrets.TENANT_ID}}   
            PowerPlatformSPN: ${{secrets.PowerPlatformSPN}}
        shell: pwsh
        run: |
            $aadHost = "login.microsoftonline.com"
            $clientId = "$env:CLIENT_ID"
            $clientSecret = "$env:PowerPlatformSPN"
            $tenantId = "$env:TENANT_ID"
            
            $url = "${{ github.event.inputs.environment_url }}"
            $options = [System.StringSplitOptions]::RemoveEmptyEntries
            $dataverseHost = $url.Split("://", $options)[1].Split("/")[0]
            
            $body = @{client_id = $clientId; client_secret = $clientSecret; grant_type = "client_credentials"; scope = "https://$dataverseHost/.default"; }
            $OAuthReq = Invoke-RestMethod -Method Post -Uri "https://$aadHost/$tenantId/oauth2/v2.0/token" -Body $body
            $spnToken = $OAuthReq.access_token
            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
            $headers.Add("Authorization", "Bearer $spnToken")
            $headers.Add("Content-Type", "application/json")
            $odataQueryForFileName = "deploymentartifacts(${{ github.event.inputs.artifact_id }})?`$select=name"
            $requestUrl = "https://$dataverseHost/api/data/v9.2/$odataQueryForFileName"    
            $reponse = Invoke-RestMethod $requestUrl -Method 'GET' -Headers $headers
            
            $solutionName = $reponse.name
            
            $odataQueryForFileContents = "deploymentartifacts(${{ github.event.inputs.artifact_id }})/artifactfile/$value"
            $requestUrl = "https://$dataverseHost/api/data/v9.2/$odataQueryForFileContents"
            $response = Invoke-RestMethod $requestUrl -Method 'GET' -Headers $headers
            $bytes = [Convert]::FromBase64String($response.value)
            [IO.File]::WriteAllBytes("${{ github.event.inputs.solution_name }}_managed.zip", $bytes)
      # Unpack the solution
      - name: unpack-managed-solution
        uses: microsoft/powerplatform-actions/unpack-solution@v0
        with:
          solution-file: "${{ github.event.inputs.solution_name }}_managed.zip"
          solution-folder: "${{ github.event.repository.name }}"
          solution-type: 'Managed'
          process-canvas-apps: true
          overwrite-files: true

      # Commit changes to the existing or new branch
      - name: commit changes
        shell: pwsh
        run: |
          rm -rf ${{ github.event.inputs.solution_name }}_managed.zip
          git config user.name "GitHub Actions Bot"
          git config user.email "<>" 
          git pull 
          git add --all
          git commit -am "${{ github.event.inputs.commit_message }}" --allow-empty

      # Push the committed changes to the source branch
      - name: push to ${{ github.event.inputs.source_branch }}
        shell: pwsh
        run: |
          if('${{ github.event.inputs.target_branch }}' -ne '') {
              git push origin ${{ github.event.inputs.target_branch }}
          } else {
              git push origin ${{ github.event.inputs.source_branch }}
          }
