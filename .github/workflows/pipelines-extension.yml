name: Export, unpack and commit the solution to git
run-name: Getting ${{ github.event.inputs.solution_name }} solution from environment ${{ github.event.inputs.environment_url }} environment and committing
on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "Name of the Solution in Dataverse environment"
        required: true
        default: yoursolutionname
      environment_url:
        description: Https endpoint of your Dataverse environment"
        required: true
        default: "https://[your-env].crm.dynamics.com"
      source_branch:
        description: "Source Branch for the commit"
        required: true
        default: main
      branch_to_create:
        description: "New Branch to create or empty if source branch should be used"
        required: false
      commit_message:
        description: "Message to provide for the commit"
        required: true
permissions:
  contents: write
jobs:
  export-unpack-commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: create or checkout git branch
        if: github.event.inputs.branch_to_create != ''
        run: |
          $branchToFind = "${{ github.event.inputs.branch_to_create }}"
          $branches = git branch -a
          if ([System.String]::Join("",$branches).Contains($branchToFind)) {
            echo "checking out $branchToFind"
            git checkout  $branchToFind
            git pull
          }
          else {
            git init
            git checkout -b ${{ github.event.inputs.branch_to_create }} ${{ github.event.inputs.source_branch }}
          }

      # Runs a set of commands using the runners shell
      - name: export-solution action
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
            environment-url: ${{ github.event.inputs.environment_url}}
            app-id: ${{secrets.CLIENT_ID}}
            client-secret: ${{ secrets.POWERPLATFORMSPN }}
            tenant-id: ${{secrets.TENANT_ID}}
            solution-name: ${{ github.event.inputs.solution_name }}
            solution-output-file: ${{ github.event.repository.name }}/${{ github.event.inputs.solution_name }}_unmanaged.zip
            overwrite: true
            run-asynchronously: true

      - name: unpack-solution action
        uses: microsoft/powerplatform-actions/unpack-solution@v0
        with:
          solution-file: ${{ github.event.repository.name }}/${{ github.event.inputs.solution_name }}_unmanaged.zip
          solution-folder: ${{ github.event.repository.name }}/${{ github.event.inputs.solution_name }}
          solution-type: 'Unmanaged'
          process-canvas-apps: true
          overwrite-files: true
          
      - name: export-managed-solution
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
            environment-url: ${{ github.event.inputs.environment_url}}
            app-id: ${{secrets.CLIENT_ID}}
            client-secret: ${{ secrets.PowerPlatformSPN }}
            tenant-id: ${{secrets.TENANT_ID}}
            solution-name: ${{ github.event.inputs.solution_name }}
            solution-output-file: ${{ github.event.repository.name }}/${{ github.event.inputs.solution_name }}_managed.zip
            overwrite: true
            managed: true

      # Commit changes to the existing or new branch
      - name: commit changes
        shell: pwsh
        run: |
          rm -rf ${{ github.event.repository.name }}/${{ github.event.inputs.solution_name }}_unmanaged.zip
          git config user.name "GitHub Actions Bot"
          git config user.email "<>" 
          git pull 
          git add --all
          git commit -am "${{ github.event.inputs.commit_message }}" --allow-empty

      - name: push to ${{ github.event.inputs.source_branch }}
        if: github.event.inputs.branch_to_create == ''
        run: |
          git push origin main

      - name: push to ${{ github.event.inputs.branch_to_create }}
        if: github.event.inputs.branch_to_create != ''
        run: |
          git push --set-upstream origin ${{ github.event.inputs.branch_to_create }}